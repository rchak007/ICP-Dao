type Account = record { owner : principal; subaccount : opt Subaccount };
type DAO = service {
  _burn : (principal, nat) -> () oneway;
  addGoal : (text) -> ();
  addMember : (Member) -> (Result);
  balanceOf : (principal) -> (nat) query;
  burn : (principal, nat) -> (Result);
  createProposal : (ProposalContent__1) -> (Result_2);
  getAllLedgerPrincipals : () -> (vec principal) query;
  getAllLedgerVals : () -> (vec nat) query;
  getAllMembers : () -> (vec Member) query;
  getAllProposals : () -> (vec Proposal) query;
  getGoals : () -> (vec text) query;
  getManifesto : () -> (text) query;
  getMember : (principal) -> (Result_1) query;
  getName : () -> (text) query;
  getProposal : (nat64) -> (opt Proposal) query;
  mint : (principal, nat) -> (Result);
  numberOfMembers : () -> (nat) query;
  removeMember : () -> (Result);
  setManifesto : (text) -> ();
  tokenName : () -> (text) query;
  tokenSymbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (Account, Account, nat) -> (Result);
  updateMember : (Member) -> (Result);
  voteProposal : (ProposalId, bool) -> (Result);
  whoami : () -> (principal) query;
};
type Member = record { age : nat; name : text };
type Proposal = record {
  id : nat64;
  status : ProposalStatus;
  created : Time;
  creator : principal;
  content : ProposalContent;
  votes : vec Vote;
  voteScore : int;
  executed : opt Time;
};
type ProposalContent = variant { AddGoal : text; ChangeManifesto : text };
type ProposalContent__1 = variant { AddGoal : text; ChangeManifesto : text };
type ProposalId = nat64;
type ProposalId__1 = nat64;
type ProposalStatus = variant { Open; Rejected; Accepted };
type Result = variant { ok; err : text };
type Result_1 = variant { ok : Member; err : text };
type Result_2 = variant { ok : ProposalId__1; err : text };
type Subaccount = vec nat8;
type Time = int;
type Vote = record { member : principal; votingPower : nat; yesOrNo : bool };
service : DAO